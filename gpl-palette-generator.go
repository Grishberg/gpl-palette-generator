package gplpalette

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

func CreatePaletteFromFile(inputFileName string, paletteName string, columnsCount int) {

	file, err := os.Open(inputFileName)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	colorLines := make([]string, 0)
	colorIndex := 1
	for scanner.Scan() {
		line := scanner.Text()
		//number = (int)strtol(line, NULL, 16);
		fmt.Println(line)
		if len(line) == 0 {
			continue
		}

		r, g, b := parseHexColor(line)
		colorLines = append(colorLines, fmt.Sprintf("%v %v %v\tColor%v", r, g, b, colorIndex))
		colorIndex++
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	gplFileName := createPaletteFileName(paletteName)

	writeNewPalette(gplFileName, paletteName, columnsCount, colorLines)
}

func parseHexColor(colorStr string) (int, int, int) {
	var formattedStr = colorStr
	strLen := len(formattedStr)
	if strLen > 6 {
		formattedStr = formattedStr[strLen-6 : strLen]
	}

	fmt.Println("current str: " + formattedStr + ", of: " + colorStr)
	rrStr := formattedStr[:2]
	ggStr := formattedStr[2:4]
	bbStr := formattedStr[4:]
	fmt.Printf("rgb: %s %s %s\n", rrStr, ggStr, bbStr)

	r, _ := strconv.ParseUint(rrStr, 16, 8)
	g, _ := strconv.ParseUint(ggStr, 16, 8)
	b, _ := strconv.ParseUint(bbStr, 16, 8)

	return int(r), int(g), int(b)
}

func writeNewPalette(fn string, paletteName string, columns int, colorLines []string) {
	// Create a file for writing
	f, _ := os.Create(fn)
	defer f.Close()
	// Create a writer
	w := bufio.NewWriter(f)

	w.WriteString("GIMP Palette\n")
	w.WriteString("Name: " + paletteName + "\n")
	w.WriteString(fmt.Sprintf("Columns: %v\n", columns))
	w.WriteString("# generated by palette-generator https://github.com/grishberg/gpl-palette-generator\n")

	for i, s := range colorLines {
		w.WriteString(s)
		if i < len(colorLines)-1 {
			w.WriteString("\n")
		}
	}

	// Very important to invoke after writing a large number of lines
	w.Flush()
	fmt.Printf("Created %s\n", fn)
}

func createPaletteFileName(paletteName string) string {
	s := strings.ReplaceAll(paletteName, " ", "-")
	s = strings.ToLower(s)
	return s + ".gpl"
}
